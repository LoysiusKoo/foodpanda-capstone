// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlist.sql

package db

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
  name,
  image,
  food_items,
  is_active
) 
VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, image, food_items, is_active, created_on
`

type CreatePlaylistParams struct {
	Name      string      `json:"name"`
	Image     null.String `json:"image"`
	FoodItems null.String `json:"food_items"`
	IsActive  bool        `json:"is_active"`
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.Name,
		arg.Image,
		arg.FoodItems,
		arg.IsActive,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}

const deletePlaylist = `-- name: DeletePlaylist :exec
DELETE FROM playlists
WHERE id = $1
`

func (q *Queries) DeletePlaylist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist, id)
	return err
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, image, food_items, is_active, created_on FROM playlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}

const listPlaylists = `-- name: ListPlaylists :many
SELECT id, name, image, food_items, is_active, created_on FROM playlists
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPlaylistsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaylists(ctx context.Context, arg ListPlaylistsParams) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Playlist{}
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.FoodItems,
			&i.IsActive,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylist = `-- name: UpdatePlaylist :one
UPDATE playlists
SET 
  name = $2,
  image = $3,
  food_items = $4,
  is_active = $5
WHERE 
  id = $1
RETURNING id, name, image, food_items, is_active, created_on
`

type UpdatePlaylistParams struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	Image     null.String `json:"image"`
	FoodItems null.String `json:"food_items"`
	IsActive  bool        `json:"is_active"`
}

func (q *Queries) UpdatePlaylist(ctx context.Context, arg UpdatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylist,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.FoodItems,
		arg.IsActive,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}
