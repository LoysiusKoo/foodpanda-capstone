// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlist.sql

package db

import (
	"context"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
  name,
  image,
  numberofweeks,
  dayofweek,
  food_items,
  is_active
) 
VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, image, numberofweeks, dayofweek, food_items, is_active, created_on
`

type CreatePlaylistParams struct {
	Name          string `json:"name"`
	Image         string `json:"image"`
	Numberofweeks int64  `json:"numberofweeks"`
	Dayofweek     string `json:"dayofweek"`
	FoodItems     string `json:"food_items"`
	IsActive      bool   `json:"is_active"`
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.Name,
		arg.Image,
		arg.Numberofweeks,
		arg.Dayofweek,
		arg.FoodItems,
		arg.IsActive,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Numberofweeks,
		&i.Dayofweek,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}

const deletePlaylist = `-- name: DeletePlaylist :one
DELETE FROM playlists
WHERE id = $1 
RETURNING id, name, image, numberofweeks, dayofweek, food_items, is_active, created_on
`

func (q *Queries) DeletePlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, deletePlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Numberofweeks,
		&i.Dayofweek,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}

const getAllPlaylists = `-- name: GetAllPlaylists :many
SELECT id, name, image, numberofweeks, dayofweek, food_items, is_active, created_on FROM playlists
ORDER BY id
`

func (q *Queries) GetAllPlaylists(ctx context.Context) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlaylists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Playlist{}
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Numberofweeks,
			&i.Dayofweek,
			&i.FoodItems,
			&i.IsActive,
			&i.CreatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFoodItemsFromPlaylists = `-- name: GetFoodItemsFromPlaylists :many
SELECT food_items FROM playlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFoodItemsFromPlaylists(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFoodItemsFromPlaylists, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var food_items string
		if err := rows.Scan(&food_items); err != nil {
			return nil, err
		}
		items = append(items, food_items)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, image, numberofweeks, dayofweek, food_items, is_active, created_on FROM playlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Numberofweeks,
		&i.Dayofweek,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}

const getPlaylistFromPlaylistDishID = `-- name: GetPlaylistFromPlaylistDishID :one
SELECT p.id
FROM playlists p JOIN playlist_dishes d ON p.id = d.playlist_id
WHERE d.id = $1 LIMIT 1
`

func (q *Queries) GetPlaylistFromPlaylistDishID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistFromPlaylistDishID, id)
	err := row.Scan(&id)
	return id, err
}

const updateIsActive = `-- name: UpdateIsActive :one
UPDATE playlists
SET 
  is_active = $2
WHERE 
  id = $1
RETURNING id, name, image, numberofweeks, dayofweek, food_items, is_active, created_on
`

type UpdateIsActiveParams struct {
	ID       int64 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) UpdateIsActive(ctx context.Context, arg UpdateIsActiveParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, updateIsActive, arg.ID, arg.IsActive)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Numberofweeks,
		&i.Dayofweek,
		&i.FoodItems,
		&i.IsActive,
		&i.CreatedOn,
	)
	return i, err
}
