// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: restaurants.sql

package db

import (
	"context"
	"database/sql"

	null "gopkg.in/guregu/null.v4"
)

const createRestaurant = `-- name: CreateRestaurant :one
INSERT INTO restaurants (
  name,
  description,
  address,
  rating,
  restaurant_type,
  num_of_reviews,
  image_url
) 
VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, description, address, rating, restaurant_type, num_of_reviews, image_url
`

type CreateRestaurantParams struct {
	Name           string        `json:"name"`
	Description    null.String   `json:"description"`
	Address        null.String   `json:"address"`
	Rating         null.Float    `json:"rating"`
	RestaurantType null.String   `json:"restaurant_type"`
	NumOfReviews   sql.NullInt32 `json:"num_of_reviews"`
	ImageUrl       null.String   `json:"image_url"`
}

func (q *Queries) CreateRestaurant(ctx context.Context, arg CreateRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRowContext(ctx, createRestaurant,
		arg.Name,
		arg.Description,
		arg.Address,
		arg.Rating,
		arg.RestaurantType,
		arg.NumOfReviews,
		arg.ImageUrl,
	)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Rating,
		&i.RestaurantType,
		&i.NumOfReviews,
		&i.ImageUrl,
	)
	return i, err
}

const deleteRestaurant = `-- name: DeleteRestaurant :exec
DELETE FROM restaurants
WHERE id = $1
`

func (q *Queries) DeleteRestaurant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRestaurant, id)
	return err
}

const getRestaurantByID = `-- name: GetRestaurantByID :one
SELECT id, name, description, address, rating, restaurant_type, num_of_reviews, image_url FROM restaurants
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRestaurantByID(ctx context.Context, id int64) (Restaurant, error) {
	row := q.db.QueryRowContext(ctx, getRestaurantByID, id)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Rating,
		&i.RestaurantType,
		&i.NumOfReviews,
		&i.ImageUrl,
	)
	return i, err
}

const getRestaurants = `-- name: GetRestaurants :many
SELECT id, name, description, address, rating, restaurant_type, num_of_reviews, image_url FROM restaurants
ORDER BY id
`

func (q *Queries) GetRestaurants(ctx context.Context) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, getRestaurants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Restaurant{}
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Address,
			&i.Rating,
			&i.RestaurantType,
			&i.NumOfReviews,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRestaurants = `-- name: ListRestaurants :many
SELECT id, name, description, address, rating, restaurant_type, num_of_reviews, image_url FROM restaurants
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListRestaurantsParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRestaurants(ctx context.Context, arg ListRestaurantsParams) ([]Restaurant, error) {
	rows, err := q.db.QueryContext(ctx, listRestaurants, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Restaurant{}
	for rows.Next() {
		var i Restaurant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Address,
			&i.Rating,
			&i.RestaurantType,
			&i.NumOfReviews,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestaurant = `-- name: UpdateRestaurant :one
UPDATE restaurants
SET 
  name = $2,
  description = $3,
  address = $4,
  rating = $5,
  restaurant_type = $6,
  num_of_reviews = $7,
  image_url = $8
WHERE 
  id = $1
RETURNING id, name, description, address, rating, restaurant_type, num_of_reviews, image_url
`

type UpdateRestaurantParams struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Description    null.String   `json:"description"`
	Address        null.String   `json:"address"`
	Rating         null.Float    `json:"rating"`
	RestaurantType null.String   `json:"restaurant_type"`
	NumOfReviews   sql.NullInt32 `json:"num_of_reviews"`
	ImageUrl       null.String   `json:"image_url"`
}

func (q *Queries) UpdateRestaurant(ctx context.Context, arg UpdateRestaurantParams) (Restaurant, error) {
	row := q.db.QueryRowContext(ctx, updateRestaurant,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Address,
		arg.Rating,
		arg.RestaurantType,
		arg.NumOfReviews,
		arg.ImageUrl,
	)
	var i Restaurant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Rating,
		&i.RestaurantType,
		&i.NumOfReviews,
		&i.ImageUrl,
	)
	return i, err
}
